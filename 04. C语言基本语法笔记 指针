

//
#include <stdio.h>
int main()
{
    char* p = "abcdef";
    printf("%c\n",*p);  // a
    printf("%s\n",p);   // abcdef
    return 0;
}

//
#include <stdio.h>
int main()
{
    char arr1[] = "abcdef";
    char arr2[] = "abcdef";
    char* p1 = "abcdef";
    char* p2 = "abcdef";

    if(arr1 == arr2){
        printf("arr1 == arr2\n");
    }else{
        printf("arr1 != arr2\n");  // arr1 != arr2
    }

    if(p1 == p2){
        printf("p1 == p2\n");  // p1 == p2
    }else{
        printf("p1 != p2\n");
    }
    return 0;
}


//
#include <stdio.h>
int main()
{
    int arr[10] = {0};  // 整型数组
    char ch[5] = {0};   // 字符数组
    int* parr[4];  // 存放整型指针的数组 - 指针数组
    char* pch[4];  // 存放字符指针的数组 - 指针数组
    return 0;
}





//
#include <stdio.h>
int main()
{
    int a = 10;
    int b = 20;
    int c = 30;
    int d = 40;
    int* arr[4] = {&a, &b, &c, &d};  // 指针数组存放指针
    int i = 0;
    for(i = 0; i<4; i++){
        printf("%d\n", *(arr[i]));  // 10,20,30,40
    }
    return 0;
}




// 指针数组的使用场景
#include <stdio.h>
int main()
{
    int arr1[] = { 1, 2, 3, 4, 5 };
    int arr2[] = { 2, 3, 4, 5, 6 };
    int arr3[] = { 3, 4, 5, 6, 7 };

    int* parr[] = { arr1, arr2, arr3 };
    int i = 0;
    for (i = 0; i < 3; i++)
    {
        int j = 0;
        for (j = 0; j < 5; j++)
        {
            printf("%d ", *(parr[i] + j));
        }
        printf("\n");
    }

    return 0;
}
/*
1 2 3 4 5
2 3 4 5 6
3 4 5 6 7
 */



//
#include <stdio.h>
int main()
{
    // int *p = NULL; // p是整型指针 - 指向整型的指针 - 可以存放整型的地址
    // char *pc = NULL; // pc是字符指针 - 指向字符的指针 - 可以存放字符的地址
    // 数组指针 - 指向数组的指针 - 可以存放数组的地址

    // int arr[10] = {0};
    // arr-数组名 - 数组名就是地址
    // &arr[0] - 第一个元素的地址
    // &arr - 数组的地址

    int arr[10] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
    int (*p)[10] = &arr; // 数组的指针变量 - 指向整型数组的指针，p就是数组的指针

    return 0;
}




//打印出数组每一个元素
#include <stdio.h>
int main()
{
    int arr[10] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
    int (*p)[10] = &arr;
    int i = 0;
    for(i = 0; i<10;i++){
        printf("%d\n",(*p)[i]);  // 打印出数组每一个元素
    }
    return 0;
}





//
#include <stdio.h>
int Add(int x, int y)
{
	return x + y;
}
int Sub(int x, int y)
{
	return x - y;
}
int Mul(int x, int y)
{
	return x * y;
}
int Div(int x, int y)
{
	return x / y;
}

int main()
{
	//指针数组
	//int* arr[5];//
	//需要一个数组，这个数组可以存放4个函数的地址 - 函数指针的数组
	int (*pa)(int, int) = Add;//Sub/Mul/Div

	int(*parr[4])(int, int) = {Add, Sub, Mul, Div};//函数指针的数组

	int i = 0;
	for (i = 0; i < 4; i++)
	{
		printf("%d\n", parr[i](2, 3));//5 -1 6 0
	}

	return 0;
}



int main()
{
	char* my_strcpy(char* dest, const char* src);
    // 写一个函数指针 pf，能够指向my_strcpy
    char* (*pf)(char*,const char*);
    // 写一个函数指针数组 pfArr，能够存放4个my_strcpy函数的地址
    char* (*pfArr[4])(char*,const char*);

	return 0;
}




//计算器 - 利用转移表实现
#include <stdio.h>

void menu()
{
	printf("**************************\n");
	printf("**  1. add       2. sub **\n");
	printf("**  3. mul       4. div **\n");
	printf("**  5. xor       0. exit**\n");
	printf("**************************\n");
}

int Add(int x, int y)
{
	return x + y;
}

int Sub(int x, int y)
{
	return x - y;
}

int Mul(int x, int y)
{
	return x * y;
}

int Div(int x, int y)
{
	return x / y;
}

int Xor(int x, int y)
{
	return x ^ y;
}

int main()
{
	int input = 0;
	int x = 0;
	int y = 0;

	//pfArr 是一个函数指针数组 - 转移表
	int(*pfArr[])(int, int) = {0, Add, Sub, Mul, Div, Xor};
	do
	{
		menu();
		printf("请选择:>");
		scanf("%d", &input);
		if (input >= 1 && input <= 5)
		{
			printf("请输入两个操作数:>");
			scanf("%d%d", &x, &y);
			int ret = pfArr[input](x, y);
			printf("%d\n", ret);
		}
		else if (input == 0)
		{
			printf("退出\n");
		}
		else
		{
			printf("选择错误\n");
		}
	} while (input);
}




//计算器 - 回调函数
#include <stdio.h>

void menu()
{
	printf("**************************\n");
	printf("**  1. add       2. sub **\n");
	printf("**  3. mul       4. div **\n");
	printf("**  5. xor       0. exit**\n");
	printf("**************************\n");
}

int Add(int x, int y)
{
	return x + y;
}

int Sub(int x, int y)
{
	return x - y;
}

int Mul(int x, int y)
{
	return x * y;
}

int Div(int x, int y)
{
	return x / y;
}

int Xor(int x, int y)
{
	return x ^ y;
}


void Calc(int (*pf)(int, int))
{
	int x = 0;
	int y = 0;
	printf("请输入两个操作数:>");
	scanf("%d%d", &x, &y);
	printf("%d\n", pf(x, y));
}

int main()
{
	int input = 0;

	do
	{
		menu();
		printf("请选择:>");
		scanf("%d", &input);

		switch (input)
		{
		case 1:
			Calc(Add);  // 回调函数
			break;
		case 2:
			Calc(Sub);
			break;
		case 3:
			Calc(Mul);
			break;
		case 4:
			Calc(Div);
			break;
		case 0:
			printf("退出\n");
			break;
		default:
			printf("选择错误\n");
			break;
		}
	} while (input);
}





//回调函数
#include <stdio.h>
void print(char *str){
	printf("hehe:%s", str);
}

void test( void (*p)(char*) ){
	printf("test\n");
	p("bit");
}

int main(){
	test(print);
	return 0;
}
/*
test
hehe:bit
 */


#include <stdio.h>
int Add(int x, int y){
    return x+y;
}

int main(){
    // 指针数组
	int* arr[10];
    // 数组指针
    int* (*pa)[10] = &arr;
    // 函数指针
    int (*pAdd)(int, int) = Add;  // &Add
    int sum = (*pAdd)(1,2); // 函数指针
    //int sum = pAdd(1,2);  // 3 函数指针
    //int sum = Add(1,2);  // 3
    printf("sum = %d\n",sum);  // 3
    // 函数指针的数组
    int(*pArr[5])(int, int); // 这里的5表示元素个数，按照需要写
    // 指向函数指针数组的指针
    int(*(*ppArr)[5])(int,int) = &pArr;
	return 0;
}
