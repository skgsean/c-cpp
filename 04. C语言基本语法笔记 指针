

//
#include <stdio.h>
int main()
{
    char* p = "abcdef";
    printf("%c\n",*p);  // a
    printf("%s\n",p);   // abcdef
    return 0;
}

//
#include <stdio.h>
int main()
{
    char arr1[] = "abcdef";
    char arr2[] = "abcdef";
    char* p1 = "abcdef";
    char* p2 = "abcdef";

    if(arr1 == arr2){
        printf("arr1 == arr2\n");
    }else{
        printf("arr1 != arr2\n");  // arr1 != arr2
    }

    if(p1 == p2){
        printf("p1 == p2\n");  // p1 == p2
    }else{
        printf("p1 != p2\n");
    }
    return 0;
}


//
#include <stdio.h>
int main()
{
    int arr[10] = {0};  // 整型数组
    char ch[5] = {0};   // 字符数组
    int* parr[4];  // 存放整型指针的数组 - 指针数组
    char* pch[4];  // 存放字符指针的数组 - 指针数组
    return 0;
}





//
#include <stdio.h>
int main()
{
    int a = 10;
    int b = 20;
    int c = 30;
    int d = 40;
    int* arr[4] = {&a, &b, &c, &d};  // 指针数组存放指针
    int i = 0;
    for(i = 0; i<4; i++){
        printf("%d\n", *(arr[i]));  // 10,20,30,40
    }
    return 0;
}




// 指针数组的使用场景
#include <stdio.h>
int main()
{
    int arr1[] = { 1, 2, 3, 4, 5 };
    int arr2[] = { 2, 3, 4, 5, 6 };
    int arr3[] = { 3, 4, 5, 6, 7 };

    int* parr[] = { arr1, arr2, arr3 };
    int i = 0;
    for (i = 0; i < 3; i++)
    {
        int j = 0;
        for (j = 0; j < 5; j++)
        {
            printf("%d ", *(parr[i] + j));
        }
        printf("\n");
    }

    return 0;
}
/*
1 2 3 4 5
2 3 4 5 6
3 4 5 6 7
 */



//
#include <stdio.h>
int main()
{
    // int *p = NULL; // p是整型指针 - 指向整型的指针 - 可以存放整型的地址
    // char *pc = NULL; // pc是字符指针 - 指向字符的指针 - 可以存放字符的地址
    // 数组指针 - 指向数组的指针 - 可以存放数组的地址

    // int arr[10] = {0};
    // arr-数组名 - 数组名就是地址
    // &arr[0] - 第一个元素的地址
    // &arr - 数组的地址

    int arr[10] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
    int (*p)[10] = &arr; // 数组的指针变量 - 指向整型数组的指针，p就是数组的指针

    return 0;
}




//打印出数组每一个元素
#include <stdio.h>
int main()
{
    int arr[10] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
    int (*p)[10] = &arr;
    int i = 0;
    for(i = 0; i<10;i++){
        printf("%d\n",(*p)[i]);  // 打印出数组每一个元素
    }
    return 0;
}
