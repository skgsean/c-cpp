#include <stdio.h>
#include <string.h>


int main() {
    char arr1[] = "abc";
    char arr2[] = {'a','b','c'};
    printf("%lu\n",sizeof(arr1));  // 4  注意，如果数组类型是int，则一个元素占4个字节
    printf("%lu\n",sizeof(arr2));  // 3
    printf("%lu\n",strlen(arr1));  // 3
    printf("%lu\n",strlen(arr2));  // 3  // 不同环境测试可能不同，可能会出现随机值

    return 0;
}


//看以下的区别

#include <stdio.h>

int main() {
    int arr[] = {1,2,3,4,5,6,7,8,9,10};
    int sz = sizeof(arr)/sizeof(int);
    int i = 0;
    for(i = 0; i<sz;i++){
        printf("%d\n",arr[i]);
    }

    return 0;
}


#include <stdio.h>
// 二维数组
int main() {
    int arr[3][4] = {{1,2,3},{4,5}};
    int i = 0;
    for(i=0;i<3;i++){
        int j = 0;
        for(j=0;j<4;j++){
            printf("&arr[%d][%d] = %p\n",i,j,&arr[i][j]);
        }
    }
    return 0;
}
/*
bash-3.2$ gcc ctest.c 
bash-3.2$ ./a.out 
&arr[0][0] = 0x16f3e7298
&arr[0][1] = 0x16f3e729c
&arr[0][2] = 0x16f3e72a0
&arr[0][3] = 0x16f3e72a4
&arr[1][0] = 0x16f3e72a8
&arr[1][1] = 0x16f3e72ac
&arr[1][2] = 0x16f3e72b0
&arr[1][3] = 0x16f3e72b4
&arr[2][0] = 0x16f3e72b8
&arr[2][1] = 0x16f3e72bc
&arr[2][2] = 0x16f3e72c0
&arr[2][3] = 0x16f3e72c4
*/



#include <stdio.h>
// 二维数组
int main() {
    int arr[3][4] = {{1,2,3},{4,5}};
    int i = 0;
    for(i=0;i<3;i++){
        int j = 0;
        for(j=0;j<4;j++){
            //printf("&arr[%d][%d] = %p\n",i,j,&arr[i][j]);
        }
    }
    int* p_1 = &arr[0][0];
    printf("%p\n", p_1);
    printf("%d\n", *p_1);
    printf("%p\n", p_1+1);  // 这里+1其实是指针向后移动一位，这里是4个字节
    printf("%d\n", *(p_1+1));
    return 0;
}
/*
bash-3.2$ gcc ctest.c 
bash-3.2$ ./a.out 
0x16d50b298
1
0x16d50b29c
2
*/

// 冒泡排序
#include <stdio.h>

void bubble_sort(int arr[],int sz){
    int i = 0;
    for(i=0;i<sz-1;i++){
        int j = 0;
        for(j = 0; j<sz -i-1;j++){
            if(arr[j]>arr[j+1]){
                int temp = arr[j];
                arr[j] = arr[j+1];
                arr[j+1] = temp;
            }
        }
    }
}

int main(){
    int sz = 0;
    int arr[] = {3,1,7,5,8,9,0,2,4,6};
    sz = sizeof(arr)/sizeof(int);

    bubble_sort(arr,sz);
    for(int i=0; i<sz;i++){
        printf("%d\n",arr[i]);
    }

    return 0;
}


#include <stdio.h>
// 交换两个数的值


int main() {
    int a = 3;
    int b = 5;

    // // 创建临时变量的方法
    // int tmp = 0;
    // tmp = a;
    // a=b;
    // b=tmp;


    // // 不创建临时变量的方法  但这种情况当ab都很大的时候，相加后可能会内存溢出
    // a = a+ b;
    // b = a-b;
    // a = a-b;

    printf("a=%d, b=%d\n",a,b);

    // 使用异或操作符不会导致内存溢出
    a = a^b;
    b = a^b;
    a = a^b;

    printf("a=%d, b=%d\n",a,b);
    return 0;
}


#include <stdio.h>
// 计算一个数的二进制有多少个1，这里仅限正整数

int main() {
    int num = 0;
    int count = 0;
    scanf("%d",&num);

    while(num){
        if(num%2 == 1){
            count ++;
            num = num / 2;
        }
    }
    printf("%d\n", count);

    return 0;
}



#include <stdio.h>
// 计算一个数的二进制有多少个1，不仅限正整数

int main() {
    int num = 0;
    int count = 0;
    scanf("%d",&num);

   int i = 0;
   for(i = 0;i<32;i++){
    if((num >> i & 1)==1){
        count++;
    }
   }
    printf("%d\n", count);

    return 0;
}

#include <stdio.h>
// 按位取反  ~

int main() {
    int a = 0;
    printf("%d\n",~a);
    // 0 按照二进制取反
    // 000000000000000000000000   正数0原码补码反码相同
    // 111111111111111111111111 - 按位取反后的补码  计算机里面这样存储  补码-1取反得到原码 
    // 111111111111111111111110 - 反码 补码-1得到反码，反码+1得到上面的补码，反码是下面原码取反得到的
    // 100000000000000000000001 - 原码 

    return 0;
}




// 指针的例子
#include <stdio.h>

int main() {

    int arr[10] = {1,2,3,4,5,6,7,8,9,10};
    int i =0;
    int sz = sizeof(arr) / sizeof(int);
    int* p =arr;
    for(i = 0; i < sz; i++){
        printf("%d\n",*p);
        p++;
        //printf("%d\n",arr[i]);
    }
    return 0;
}



// 指针的例子
#include <stdio.h>

int main() {

    int arr[10] = {1,2,3,4,5,6,7,8,9,10};
    printf("%ld\n",&arr[9]-&arr[0]);  // 得到数组个数 9
    return 0;
}



// 指针的例子
#include <stdio.h>

int my_strlen(char* str){
    char* start = str;
    char* end = str;
    while(*end != '\0'){
        end ++;
    }
    return end-start;  //  得到字符串长度
}


int main() {

    char arr[] = "bit";
    int len = my_strlen(arr);
    printf("%d\n",len);  // 3
    return 0;
}


// 指针的例子
#include <stdio.h>
int main() {

    int arr[10] = {0};
    printf("%p\n",arr);  // 首元素地址 0x16dd2f250
    printf("%p\n",arr+1);   //       0x16dd2f254

    printf("%p\n",&arr[0]); //  0x16dd2f250
    printf("%p\n",&arr[0]+1);// 0x16dd2f254

    printf("%p\n",&arr);   // 0x16dd2f250  &arr -> &数组名 取出的是整个数组的地址
    printf("%p\n",&arr+1); // 0x16dd2f278  // 整个数组的地址+1，加了40bit位
    return 0;
}



// 指针的例子
#include <stdio.h>

int main() {

    int arr[10] = {0};
    int* p = arr;
    int i =0;
    for(i = 0; i< 10; i++){
        printf("%p  ====== %p\n",p+i, &arr[i]);
    }
    return 0;
}
/*
bash-3.2$ ./a.out 
0x16fd3b250  ====== 0x16fd3b250
0x16fd3b254  ====== 0x16fd3b254
0x16fd3b258  ====== 0x16fd3b258
0x16fd3b25c  ====== 0x16fd3b25c
0x16fd3b260  ====== 0x16fd3b260
0x16fd3b264  ====== 0x16fd3b264
0x16fd3b268  ====== 0x16fd3b268
0x16fd3b26c  ====== 0x16fd3b26c
0x16fd3b270  ====== 0x16fd3b270
0x16fd3b274  ====== 0x16fd3b274
*/


// 指针的例子
#include <stdio.h>

int main() {

    int arr[10] = {0};
    int* p = arr;
    int i =0;
    for(i = 0; i< 10; i++){
        *(p+i) = i;  // 元素赋值
    }
    for(i = 0;i<10;i++){
        printf("%d\n",*(p+i));  // 取元素值，打印 0，1，2，3，4，5，6，7，8，9
    }
    return 0;
}


// 二级指针
#include <stdio.h>

int main() {

    int a = 10;
    int b = 20;
    int c = 30;

    int* arr[3] = {&a,&b,&c};

    int i = 0;
    for(i = 0; i <3; i++){
        printf("%d\n", *(arr[i]));  // 10 20 30
    }

    int* p = &a;
    int ** pp = &p;  // 二级指针
    printf("%p\n", pp);  // 0x16cfaf240
    return 0;
}


// 计算一个整数的二进制表达有多少个1
#include <stdio.h>

int count_bit_one(unsigned int n){  // 注意这里用unsigned是因为当传入的值是负数时也可以计算
    int count = 0;
    while(n){
        if(n%2 == 1){
            count ++;
        }
        n = n/2;
    }
    return count;


}
int main() {
    int a = 0;
    scanf("%d",&a);

    int count = count_bit_one(a);

    printf("%d\n",count);
    
    return 0;
}


// 计算一个整数的二进制表达有多少个1
#include <stdio.h>

int count_bit_one(int n){  // 
    int count = 0;
    int i =0;
    for(i = 0; i<32;i++){
        if(((n>>i) & 1)==1){  // 向右移动再进行与运算
            count ++;
        }
    }
    return count;


}
int main() {
    int a = 0;
    scanf("%d",&a);

    int count = count_bit_one(a);

    printf("%d\n",count);
    
    return 0;
}



// 计算一个整数的二进制表达有多少个1
#include <stdio.h>

int count_bit_one(int n){  
    int count = 0;
    while(n){
        n=n&(n-1);
        count ++;
    }
    return count;
// n = n&(n-1)
//13
//1101
//1100
//1101&1100 -> 1100


}
int main() {
    int a = 0;
    scanf("%d",&a);

    int count = count_bit_one(a);

    printf("%d\n",count);
    
    return 0;
}



// 计算两个整数有二进制有多少位不相同
#include <stdio.h>

int get_diff_bit(int m, int n){
    int tmp = m^n;  // 异或 相同为0，相异为1
    int count = 0;
    while(tmp){
        tmp = tmp&(tmp-1);
        count ++;
    }
    return count;
}

int main() {
    int m = 0;
    int n = 0;
    scanf("%d%d",&m,&n);
    int count = get_diff_bit(m,n);
    printf("count = %d\n",count);
    return 0;
}



// 打印一个数的二进制的奇数位和偶数位
#include <stdio.h>

void print_bit(int n){
    int i =0;
    printf("奇数位：\n");
    for(i = 30; i>=0;i-=2){
        printf("%d ",(n>>i)&1);
    }
    printf("\n");
    printf("偶数位：\n");
    for(i = 31; i>=1;i-=2){
        printf("%d ",(n>>i)&1);
    }
    printf("\n");
}


int main() {
    int m = 0;
    int n = 0;
    scanf("%d",&n);
    print_bit(n);
    return 0;
}


 

// 打印数组元素
#include <stdio.h>
void print(int *p,int sz){
    for(int i = 0;i<sz;i++){
        printf("%d ", *(p+i));
    }
}


int main() {
    int arr[] = {1,2,3,4,5,6,7,8,9};
    int sz = sizeof(arr)/sizeof(arr[0]);
    print(arr,sz);
}


// 将字符串逆序 - 使用库函数
#include <stdio.h>
#include <string.h>

void reverse_string(char arr[]){
    int left = 0;
    int right = strlen(arr)-1;

    while(left < right){
        int tmp = arr[left];
        arr[left] = arr[right];
        arr[right] = tmp;
        left ++;
        right --;
    }
}


int main() {
    char arr[] = "abcdef";
    reverse_string(arr);
    printf("%s\n",arr);
    return 0;
}



// 将字符串逆序 - 不使用库函数
#include <stdio.h>
#include <string.h>

int my_strlen(char * str){
    int count = 0;
    while(*str != '\0'){
        count ++;
        str++;
    }
    return count;
}

void reverse_string(char arr[]){
    int left = 0;
    int right = my_strlen(arr)-1;  // 不使用库函数

    while(left < right){
        int tmp = arr[left];
        arr[left] = arr[right];
        arr[right] = tmp;
        left ++;
        right --;
    }
}


int main() {
    char arr[] = "abcdef";
    reverse_string(arr);
    printf("%s\n",arr);
    return 0;
}




// 将字符串逆序 - 不使用库函数，且使用递归方式
#include <stdio.h>
#include <string.h>

int my_strlen(char * str){
    int count = 0;
    while(*str != '\0'){
        count ++;
        str++;
    }
    return count;
}

void reverse_string(char arr[]){
    char tmp = arr[0];
    int len = my_strlen(arr);
    arr[0] = arr[len - 1];
    arr[len-1] = '\0';
    if(my_strlen(arr+1)>=2){
        reverse_string(arr+1);  // 递归
    }
    arr[len-1] = tmp;
}


int main() {
    char arr[] = "abcdefgh";
    reverse_string(arr);
    printf("%s\n",arr);
    return 0;
}
