#include <stdio.h>
#include <string.h>


int main() {
    char arr1[] = "abc";
    char arr2[] = {'a','b','c'};
    printf("%lu\n",sizeof(arr1));  // 4  注意，如果数组类型是int，则一个元素占4个字节
    printf("%lu\n",sizeof(arr2));  // 3
    printf("%lu\n",strlen(arr1));  // 3
    printf("%lu\n",strlen(arr2));  // 3  // 不同环境测试可能不同，可能会出现随机值

    return 0;
}


//看以下的区别

#include <stdio.h>

int main() {
    int arr[] = {1,2,3,4,5,6,7,8,9,10};
    int sz = sizeof(arr)/sizeof(int);
    int i = 0;
    for(i = 0; i<sz;i++){
        printf("%d\n",arr[i]);
    }

    return 0;
}


#include <stdio.h>
// 二维数组
int main() {
    int arr[3][4] = {{1,2,3},{4,5}};
    int i = 0;
    for(i=0;i<3;i++){
        int j = 0;
        for(j=0;j<4;j++){
            printf("&arr[%d][%d] = %p\n",i,j,&arr[i][j]);
        }
    }
    return 0;
}
/*
bash-3.2$ gcc ctest.c 
bash-3.2$ ./a.out 
&arr[0][0] = 0x16f3e7298
&arr[0][1] = 0x16f3e729c
&arr[0][2] = 0x16f3e72a0
&arr[0][3] = 0x16f3e72a4
&arr[1][0] = 0x16f3e72a8
&arr[1][1] = 0x16f3e72ac
&arr[1][2] = 0x16f3e72b0
&arr[1][3] = 0x16f3e72b4
&arr[2][0] = 0x16f3e72b8
&arr[2][1] = 0x16f3e72bc
&arr[2][2] = 0x16f3e72c0
&arr[2][3] = 0x16f3e72c4
*/



#include <stdio.h>
// 二维数组
int main() {
    int arr[3][4] = {{1,2,3},{4,5}};
    int i = 0;
    for(i=0;i<3;i++){
        int j = 0;
        for(j=0;j<4;j++){
            //printf("&arr[%d][%d] = %p\n",i,j,&arr[i][j]);
        }
    }
    int* p_1 = &arr[0][0];
    printf("%p\n", p_1);
    printf("%d\n", *p_1);
    printf("%p\n", p_1+1);  // 这里+1其实是指针向后移动一位，这里是4个字节
    printf("%d\n", *(p_1+1));
    return 0;
}
/*
bash-3.2$ gcc ctest.c 
bash-3.2$ ./a.out 
0x16d50b298
1
0x16d50b29c
2
*/

// 冒泡排序
#include <stdio.h>

void bubble_sort(int arr[],int sz){
    int i = 0;
    for(i=0;i<sz-1;i++){
        int j = 0;
        for(j = 0; j<sz -i-1;j++){
            if(arr[j]>arr[j+1]){
                int temp = arr[j];
                arr[j] = arr[j+1];
                arr[j+1] = temp;
            }
        }
    }
}

int main(){
    int sz = 0;
    int arr[] = {3,1,7,5,8,9,0,2,4,6};
    sz = sizeof(arr)/sizeof(int);

    bubble_sort(arr,sz);
    for(int i=0; i<sz;i++){
        printf("%d\n",arr[i]);
    }

    return 0;
}


#include <stdio.h>
// 交换两个数的值


int main() {
    int a = 3;
    int b = 5;

    // // 创建临时变量的方法
    // int tmp = 0;
    // tmp = a;
    // a=b;
    // b=tmp;


    // // 不创建临时变量的方法  但这种情况当ab都很大的时候，相加后可能会内存溢出
    // a = a+ b;
    // b = a-b;
    // a = a-b;

    printf("a=%d, b=%d\n",a,b);

    // 使用异或操作符不会导致内存溢出
    a = a^b;
    b = a^b;
    a = a^b;

    printf("a=%d, b=%d\n",a,b);
    return 0;
}


#include <stdio.h>
// 计算一个数的二进制有多少个1，这里仅限正整数

int main() {
    int num = 0;
    int count = 0;
    scanf("%d",&num);

    while(num){
        if(num%2 == 1){
            count ++;
            num = num / 2;
        }
    }
    printf("%d\n", count);

    return 0;
}



#include <stdio.h>
// 计算一个数的二进制有多少个1，不仅限正整数

int main() {
    int num = 0;
    int count = 0;
    scanf("%d",&num);

   int i = 0;
   for(i = 0;i<32;i++){
    if((num >> i & 1)==1){
        count++;
    }
   }
    printf("%d\n", count);

    return 0;
}

