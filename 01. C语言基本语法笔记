#include <stdio.h>
#include <string.h>

int main(){

    char str_1[] = "abc";
    char str_2[] = {'a','b','c','\0'}; // c语言字符串默认有个\0结尾
    printf("%zu\n",strlen(str_1));
    printf("%zu\n",strlen(str_2));

    return 0;
}

打印出3，3


#include <stdio.h>
#include <string.h>

int main() {
    int arr[10] = {10};
    //printf("%d\n", sizeof(arr) / sizeof(int));  // 计算数组长度
    for(int i = 0; i<sizeof(arr) / sizeof(int);i++){
        printf("%d\n",arr[i]);
    }
    return 0;
}


#include <stdio.h>

int main() {
    
    int ret = 0;
    int c = 0;
    char password[20] = {0};
    printf("请输入密码：>");
    scanf("%s",password);
    // 将缓冲区的\n读取走，不要影响下面的getchar()，比如用户输入123456 ABCD 这样一个getchar()不够
    while((c = getchar()) != '\n'){
        ;
    }
    printf("请确认(Y/N):>");
    ret = getchar();

    if(ret == 'Y'){
        printf("确认成功\n");
    }else{
        printf("放弃确认\n");
    }

    return 0;
    
}



#include <stdio.h>

int main() {
    
    int i = 1;
    while(i <= 10){
        if(i == 5){
            continue; // 这里会导致代码死循环
        }
        printf("%d\n",i);
        i++;
    }

    return 0;
    
}





// 计算阶乘
#include <stdio.h>

int main() {

    int sum = 0;
    for(int j = 1; j <= 10; j++){  // 实现 10！+ 9！+ 。。。1！相加
        int ret=1;
        for(int i =1; i<=j; i++){  // 计算 j!
            ret *= i;
        }
        sum += ret;
    }    
    printf("%d\n",sum);
    return 0;
}




// 二分查找
#include <stdio.h>

int main() {
    int k =7;
    int arr[] = {0,1,2,3,4,5,6,8,9,10,11};
    int sz = sizeof(arr) / sizeof(int); // 数组长度
    int left = 0; // 左下标
    int right = sz -1;  // 右下标

    while(left <= right){
        int mid = (left+right)/2;
        if(arr[mid] > k){
            right = mid -1;
        }else if(arr[mid]<k){
            left = mid+1;
        }else{
            printf("找到了，下标是：%d\n", mid);
            break;
        }
    }
    if(left > right){
        printf("找不到\n");
    }
    return 0;
}





#include <stdio.h>
#include <string.h>
#include <unistd.h>

int main() {
    char arr1[] = "welcome to bit!!!!!!!";
    char arr2[] = "#####################";
    int left = 0;
    int right = strlen(arr1)-1;  // 因为字符串末尾有个\0。这里不能用sizeof()函数计算长度

    while(left <= right){
        arr2[left] = arr1[left];
        arr2[right] = arr1[right];
        printf("%s\n",arr2);
        // 休息一秒
        sleep(1);
        left++;
        right--;
    }
    printf("%s\n",arr2);

    return 0;
}

/*
bash-3.2$ ./a.out 
w###################!
we#################!!
wel###############!!!
welc#############!!!!
welco###########!!!!!
welcom#########!!!!!!
welcome#######!!!!!!!
welcome #####t!!!!!!!
welcome t###it!!!!!!!
welcome to#bit!!!!!!!
welcome to bit!!!!!!!
welcome to bit!!!!!!!
*/



#include <stdio.h>
#include <string.h>

int main() {
    char password[20] = {0};
    for(int i = 0; i <3; i++){
        printf("请输入密码：");
        scanf("%s",password);
        if(strcmp(password,"123456") == 0){   // 字符串比较，不能用 == 要用string库函数
            printf("登录成功\n");
            break;
        }else{
            printf("登录失败\n");
        }
    }
    

    return 0;
}


// 求两个数的最大公约数
/*在 C 语言中，计算两个数的最大公约数（GCD，Greatest Common Divisor）通常使用辗转相除法（也称欧几里得算法）。以下是一个实现这一算法的示例代码：*/
#include <stdio.h>

int gcd(int a, int b) {
    int temp;
    while (b != 0) {
        temp = b;
        b = a % b;
        a = temp;
    }
    return a;
}

int main() {
    int num1, num2;

    printf("输入两个整数: ");
    scanf("%d %d", &num1, &num2);

    printf("最大公约数是: %d\n", gcd(num1, num2));

    return 0;
}



#include <stdio.h>

// 找出100-200之间所有的素数
int main() {
    int count = 0;
    
    for(int i =100; i<=200; i++){
        int j =0;
        for(j =2; j<i; j++){
            if(i%j == 0){
                break;
            }
        }
        if(i==j){
            count ++;
            printf("%d\n",i);
            }
    }
    printf("%d\n",count);
}



#include <stdio.h>
#include <math.h>

// 找出100-200之间所有的素数
int main() {
    int count = 0;
    
    for(int i =100; i<=200; i++){
        int j =0;
        for(j =2; j<=sqrt(i); j++){  // 判断素数另外一个方法是这个数字开平方内，没有整除的
            if(i%j == 0){
                break;
            }
        }
        if(j>sqrt(i)){
            count ++;
            printf("%d\n",i);
            }
    }
    printf("素数的个数：%d\n",count);
}

#include <stdio.h>

// 乘法口诀表
int main() {
    int i = 0;
    for(i = 1; i<= 9; i++){
        int j =1;
        for(j = 1; j<=i; j++){
            printf("%d*%d=%-2d ", i,j,i*j);  // -2d 表示左对齐两位
        }
        printf("\n");
    }


    return 0;
}

bash-3.2$ ./a.out 
1*1=1  
2*1=2  2*2=4  
3*1=3  3*2=6  3*3=9  
4*1=4  4*2=8  4*3=12 4*4=16 
5*1=5  5*2=10 5*3=15 5*4=20 5*5=25 
6*1=6  6*2=12 6*3=18 6*4=24 6*5=30 6*6=36 
7*1=7  7*2=14 7*3=21 7*4=28 7*5=35 7*6=42 7*7=49 
8*1=8  8*2=16 8*3=24 8*4=32 8*5=40 8*6=48 8*7=56 8*8=64 
9*1=9  9*2=18 9*3=27 9*4=36 9*5=45 9*6=54 9*7=63 9*8=72 9*9=81 
bash-3.2$ 



// 猜数字游戏

#include <stdio.h>
#include <stdlib.h>
#include <time.h>

void menu()
{
printf("**********************************\n");
printf("*********** 1.play **********\n");
printf("*********** 0.exit **********\n");
printf("**********************************\n");
printf("请输入选项：\n");
}

void playGame(){
    int inputNum;
    int randomNum = rand()%100+1;
    printf("产生的随机数字：%d\n",randomNum);
    while(1){
        printf("请输入数字：\n");
        scanf("%d",&inputNum);
        if(inputNum > randomNum){
            printf("猜大了。\n");
        }else if(inputNum < randomNum){
            printf("猜小了。\n");
        }else{
            printf("猜中了。\n");
            break;
        }
    }
}


int main(){
    srand((unsigned)time(NULL));
    while(1){
        menu();
        int input;
        scanf("%d", &input);
        if(input == 1){
            printf("开始玩游戏。\n");
            playGame();
        }else if(input == 0){
            printf("不玩了。\n");
            break;
        }else{
            printf("输入有误。\n");
        }
    }
    


    return 0;
}





// 数组二分查找，包装成函数
#include <stdio.h>

void binarySearch(int arr[], int size, int key){
    // 在 C 语言中，当数组作为函数参数传递时，它实际上是作为指针传递的。因此，sizeof(arr) 将返回指针的大小，而不是整个数组的大小。
    int left = 0;
    int right = size -1;
    int mid = 0;
    while(left <= right){
        mid = (left+right)/2;
        if(arr[mid] > key){
            right = mid -1;
        }else if(arr[mid] < key){
            left = mid + 1;
        }else{
            break;
        }
    }
    if(left <=right){
        printf("找到了，下标是：%d，数字是%d\n",mid,arr[mid]);
    }else{
        printf("找不到。\n");
    }
}

int main(){
    int arr[] = {1,2,3,4,5,6,7,8,9,10};
    int size = sizeof(arr)/sizeof(int);
    printf("arr[]的长度为：%lu\n", sizeof(arr));
    binarySearch(arr,size,10);


    return 0;
}

/*
bash-3.2$ gcc ctest.c 
bash-3.2$ ./a.out 
arr[]的长度为：40
找到了，下标是：9，数字是10
*/




// 交换两个数字
#include <stdio.h>

void swap(int* x, int* y){
    int temp;
    temp = *x;
    *x = *y;
    *y = temp;
}

int main(){
    int a = 10;
    int b = 20;
    printf("a = %d, b = %d\n", a, b);
    swap(&a,&b);
    printf("a = %d, b = %d\n", a, b);

    return 0;
}



// 函数方式判断是否为素数
#include <stdio.h>
#include <math.h>

int is_prime(int n){
    int j = 0;
    int flag;
    for(j=2;j<=sqrt(n);j++){
        if(n%j == 0){
            flag = 0;
            //printf("%d不是素数\n",n);
            break;
        }
    }
    if(j>sqrt(n)){
            flag = 1;
            //printf("%d是素数\n",n);
        }
    return flag;
}


// 简化版
int is_prime_1(int n){
    int j =0;
     for(j=2;j<=sqrt(n);j++){
        if(n%j == 0){
           return 0;
        }
    }
    return 1;
}

int main(){
    for(int i = 100; i<=200;i++){
        if(is_prime_1(i)){
             printf("%d\n",i);
        }
    }
    return 0;
}




// 实现每次调用函数次数加1
#include <stdio.h>

void Add(int* p){
    (*p)++ ;
}

int main(){
    int num = 0;
    Add(&num);
    printf("%d\n",num);
    Add(&num);
    printf("%d\n",num);
    Add(&num);
    printf("%d\n",num);
    Add(&num);
    printf("%d\n",num);
    return 0;
}

/*bash-3.2$ ./a.out 
1
2
3
4
*/




// 初识递归
#include <stdio.h>

void print(int n){
    if(n>9){
        print(n/10);
    }
    printf("%d ",n%10);
}

int main(){

    unsigned int num = 0;
    scanf("%d",&num);
    print(num);
    printf("\n");
    return 0;
}



// 模拟strlen函数求字符串长度
#include <stdio.h>
int my_strlen(char* str){
    int count = 0;
    while(*str != '\0'){
        count ++;
        str ++;
    }
    return count;
}

int main(){
    char arr[] = "bit";
    int len = my_strlen(arr); // 数组传参是传入的数组首元素的地址
    printf("%d\n",len);
    
    return 0;
}

